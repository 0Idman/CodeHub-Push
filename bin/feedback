#!/usr/bin/env node
'use strict';
const db = require('../lib/db');
const apn = require('apn');
const path = require('path');
const co = require('co');
const logger = require('winston');
const prod = process.env.NODE_ENV === 'production';
const apnCert = path.join(__dirname, '..', 'certs', (prod ? 'cert.production.pem' : 'cert.development.pem'));
const apnKey = path.join(__dirname, '..', 'certs', (prod ? 'key.production.pem' : 'key.development.pem'));

process.on("SIGINT", process.exit);
process.on("SIGTERM", process.exit);

db.load()
.then(() => {
  const apnFeedback = new apn.feedback({ cert: apnCert, key: apnKey, interval: 600, batchFeedback: true });

  apnFeedback.on('feedbackError', err =>
    logger.error('Error with feedback service', err));

  apnFeedback.on('feedback', feedbackDevices => co(function *() {
    feedbackDevices = feedbackDevices || [];
    for (let i = 0; i < feedbackDevices.length; i++) {
      const device = feedbackDevices[i].device;
      yield db.removeExpiredRegistration(device)
        .then(() => logger.info(`Successfully removed ${device}`))
        .catch(err => logger.error(`Error removing expired device ${device}`, err));
    }
  }));
})
.catch(e => {
  logger.error(e);
  process.exit(-1);
});
